generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customers {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(45)
  gender      String?   @db.VarChar(10)
  phone       String    @unique(map: "phoneNumber_UNIQUE") @db.VarChar(20)
  age         Int?
  birthdate   DateTime? @db.DateTime(0)
  nationality String?   @db.VarChar(45)
  occupation  String?   @db.VarChar(45)
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")
  orders      orders[]
}

model employees {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(45)
  birthdate      DateTime?        @db.DateTime(0)
  phone          String           @unique(map: "phone_UNIQUE") @db.VarChar(20)
  address        String?          @db.VarChar(45)
  salary         Float            @db.Float
  position       String           @db.VarChar(45)
  create_at      DateTime         @default(now()) @map("created_at")
  updated_at     DateTime         @updatedAt @map("updated_at")
  expenses       expenses[]
  order_products order_products[]
  orders         orders[]
}

model expenses {
  id          Int        @id @default(autoincrement())
  name        String     @unique(map: "name_UNIQUE") @db.VarChar(45)
  description String?    @db.Text
  cost        Float      @db.Float
  type        String     @db.VarChar(45)
  created_at  DateTime   @default(now()) @map("created_at")
  updated_at  DateTime   @updatedAt @map("updated_at")
  employee_id Int?
  employees   employees? @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "fk_expense_employees1")

  @@index([employee_id], map: "fk_expense_employees1_idx")
}

model order_products {
  id          Int       @id @default(autoincrement())
  order_id    Int
  product_id  Int
  quantity    Int?
  price       Float     @db.Float
  discount    Float?    @db.Float
  type        String?   @db.VarChar(45)
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @updatedAt @map("updated_at")
  employee_id Int
  employees   employees @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "fk_order_products_employees1")
  orders      orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "fk_order_products_orders1")
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_order_products_products1")

  @@index([employee_id], map: "fk_order_products_employees1_idx")
  @@index([order_id], map: "fk_order_products_orders1_idx")
  @@index([product_id], map: "fk_order_products_products1_idx")
}

model orders {
  id                Int              @id @default(autoincrement())
  created_at        DateTime         @default(now()) @map("created_at")
  updated_at        DateTime         @updatedAt @map("updated_at")
  customer_id       Int
  grand_total       Float            @db.Float
  payment_method_id Int
  employee_id       Int
  order_products    order_products[]
  customers         customers        @relation(fields: [customer_id], references: [id], onDelete: Cascade, map: "fk_orders_customers")
  employees         employees        @relation(fields: [employee_id], references: [id], onDelete: Cascade, map: "fk_orders_employees1")
  payment_methods   payment_methods  @relation(fields: [payment_method_id], references: [id], onDelete: Cascade, map: "fk_orders_payment_methods1")

  @@index([customer_id], map: "fk_orders_customers_idx")
  @@index([employee_id], map: "fk_orders_employees1_idx")
  @@index([payment_method_id], map: "fk_orders_payment_methods1_idx")
}

model payment_methods {
  id         Int      @id @default(autoincrement())
  name       String   @unique(map: "name_UNIQUE") @db.VarChar(45)
  interest   Float?   @db.Float
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
  orders     orders[]
}

model products {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(45)
  price          Float?           @db.Float
  type           String?          @db.VarChar(45)
  created_at     DateTime         @default(now()) @map("created_at")
  updated_at     DateTime         @updatedAt @map("updated_at")
  order_products order_products[]
}
